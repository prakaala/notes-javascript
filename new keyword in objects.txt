//3 ways to create objects

using object literal:
var obj  = {};

using the new keyword:
var obj1 = new Object();

we can add obj1.name = "tony";
	obj1.class = 3;
	obj1.lastname = "reast"


//the third way is by using function, as function behaves as a object as well:

function obj3 = {
	this.name : "Karan",
	this.last: "Waldia"
	}

var o = new obj3();
and typeof o; gives object;


this keyword points to global object.


If we create a function and console this..

function a(){
	console.log(this);
}


a();

This object is pointing to the global object. It is not pointing to a() function..



function a(){
	this.name = "mango";
	console.log(this);
}

a();

We can access the variable name outside the a() by this; this.name, and name, because this when associated with any variable will refer to the global object. 
We can use only name to access the mango. 


//creating object 


function a(){
	this.name = "mango";
	console.log(this);
}

var obj =  new a();


//important thread

var c = {	
	bookName: "the c object",
 	,jjsay: function(){
	ulm console.log('bookname is ', this.bookName);
}
}

c.say()


